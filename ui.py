#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö—Ä–∞—Å–∏–≤—ã–π –ø—Ä–æ–¥–∞–∫—à–µ–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ò–ò –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
"""

# –°–ê–ú–´–ô –ü–ï–†–í–´–ô –∏–º–ø–æ—Ä—Ç –∏ –∫–æ–º–∞–Ω–¥–∞ Streamlit!
import streamlit as st

st.set_page_config(
    page_title="–ò–ò –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", 
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# –¢–æ–ª—å–∫–æ –ü–û–°–õ–ï set_page_config –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ
import pathlib, tempfile, logging, json, hashlib, traceback
from datetime import datetime
import pandas as pd

import ingest
from ingest import (
    build_vector_store,
    add_documents_to_existing_collection,
    client as qdrant,
    COLLECTION,
    SUPPORT,
    READERS,
    read_pdf,
    read_docx,
    read_text,
    read_image,
)
from qdrant_client.models import VectorParams, Distance, Filter, FieldCondition, MatchValue

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
DEV_CREDENTIALS = {
    "RanchesW": "308111"
}

def init_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è."""
    if 'confirm_delete_all' not in st.session_state:
        st.session_state.confirm_delete_all = False
    if 'files_to_delete' not in st.session_state:
        st.session_state.files_to_delete = set()
    if 'ai_initialized' not in st.session_state:
        st.session_state.ai_initialized = False

def reset_delete_states():
    """–°–±—Ä–æ—Å –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π —É–¥–∞–ª–µ–Ω–∏—è."""
    st.session_state.confirm_delete_all = False
    st.session_state.files_to_delete = set()

def lazy_import_rag() -> bool:
    """–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç RAG-—Ñ—É–Ω–∫—Ü–∏–π –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Ö –≤ session_state."""
    if 'generate' in st.session_state:
        return True                # —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ

    try:
        import torch, types
        if not hasattr(torch.classes, "__path__"):
            torch.classes.__path__ = []    # —Ñ–∏–∫—Å streamlit-watcher

        from rag_chat import (
            generate   as _gen,
            search_ctx as _sctx,
            search_in_specific_file as _sfile,
        )

        # üü¢ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∂–∏–≤–∞–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
        st.session_state.generate = _gen
        st.session_state.search_ctx = _sctx
        st.session_state.search_in_specific_file = _sfile
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ò–ò-–º–æ–¥—É–ª—è: {e}")
        return False


# CSS —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–º–Ω–æ–≥–æ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ —Å—Ç–∏–ª–µ ChatGPT
# –ó–∞–º–µ–Ω–∏—Ç–µ –≤–µ—Å—å –±–ª–æ–∫ CSS —Å—Ç–∏–ª–µ–π (—Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ 45-350) –Ω–∞ —ç—Ç–æ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–¥:

st.markdown("""
<style>
    /* –û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º */
    .main, .main .block-container, .stApp {
        background-color: #1a1a1a !important;
        color: #ffffff !important;
    }
    
    .block-container {
        padding-top: 1rem !important;
        padding-bottom: 0rem !important;
        max-width: 100% !important;
        background-color: #1a1a1a !important;
    }
    
    /* –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã Streamlit */
    #MainMenu {visibility: hidden !important;}
    footer {visibility: hidden !important;}
    header {visibility: hidden !important;}
    .stDeployButton {display: none !important;}
    
    /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —á–∞—Ç–∞ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º */
    .stChatMessage, .stChatMessage > div {
        background-color: #2d2d2d !important;
        border: 2px solid #404040 !important;
        border-radius: 12px !important;
        color: #ffffff !important;
        padding: 1rem !important;
        margin: 0.5rem 0 !important;
    }
    
    .stChatMessage[data-testid="user"], .stChatMessage[data-testid="user"] > div {
        background-color: #333333 !important;
        border-color: #555555 !important;
    }
    
    .stChatMessage[data-testid="assistant"], .stChatMessage[data-testid="assistant"] > div {
        background-color: #2a2a2a !important;
        border-color: #444444 !important;
    }
    
    /* –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ */
    h1, h2, h3, h4, h5, h6, .stMarkdown h1, .stMarkdown h2, .stMarkdown h3 {
        color: #ffffff !important;
        font-weight: 600 !important;
    }
    
    /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å –≤—ã—Å–æ–∫–∏–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–æ–º */
    .stButton > button, button[kind="primary"], button[kind="secondary"] {
        background-color: #2d2d2d !important;
        color: #ffffff !important;
        border: 2px solid #555555 !important;
        border-radius: 8px !important;
        padding: 0.5rem 1rem !important;
        font-weight: 500 !important;
        transition: all 0.3s ease !important;
        min-height: 40px !important;
    }
    
    .stButton > button:hover, button[kind="primary"]:hover, button[kind="secondary"]:hover {
        background-color: #404040 !important;
        border-color: #777777 !important;
        color: #ffffff !important;
        transform: translateY(-1px) !important;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3) !important;
    }
    
    /* –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è primary –∫–Ω–æ–ø–æ–∫ */
    button[kind="primary"], .stButton > button[type="submit"] {
        background-color: #10a37f !important;
        border-color: #10a37f !important;
        color: #ffffff !important;
    }
    
    button[kind="primary"]:hover, .stButton > button[type="submit"]:hover {
        background-color: #0d8c6b !important;
        border-color: #0d8c6b !important;
    }
    
    /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ */
    .stTextInput > div > div > input,
    .stTextArea > div > div > textarea,
    .stSelectbox > div > div > select,
    input, textarea, select {
        background-color: #2d2d2d !important;
        color: #ffffff !important;
        border: 2px solid #555555 !important;
        border-radius: 8px !important;
        padding: 0.75rem !important;
        font-size: 14px !important;
    }
    
    .stTextInput > div > div > input:focus,
    .stTextArea > div > div > textarea:focus,
    input:focus, textarea:focus {
        border-color: #10a37f !important;
        box-shadow: 0 0 0 2px rgba(16, 163, 127, 0.2) !important;
        outline: none !important;
    }
    
    /* –£–ª—É—á—à–µ–Ω–Ω—ã–π —á–∞—Ç –∏–Ω–ø—É—Ç –∫–∞–∫ –≤ ChatGPT */
    .stChatInputContainer, .stChatInput {
        background-color: transparent !important;
        padding: 1rem 0 !important;
    }
    
    .stChatInput > div, .stChatInput input {
        background-color: #2d2d2d !important;
        border: 2px solid #555555 !important;
        border-radius: 25px !important;
        padding: 1rem 1.5rem !important;
        color: #ffffff !important;
        font-size: 16px !important;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3) !important;
    }
    
    .stChatInput input::placeholder {
        color: #888888 !important;
        font-size: 16px !important;
    }
    
    /* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è */
    .stChatInput button {
        background-color: #10a37f !important;
        color: white !important;
        border: none !important;
        border-radius: 50% !important;
        width: 36px !important;
        height: 36px !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        margin-left: 8px !important;
    }
    
    .stChatInput button:hover {
        background-color: #0d8c6b !important;
        transform: scale(1.05) !important;
    }
    
    /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ç–∞–±—ã —Å –≤—ã—Å–æ–∫–∏–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–æ–º */
    .stTabs [data-baseweb="tab-list"] {
        background-color: #1a1a1a !important;
        gap: 8px !important;
        padding: 0.5rem !important;
        border-radius: 12px !important;
    }
    
    .stTabs [data-baseweb="tab"] {
        background-color: #2d2d2d !important;
        color: #cccccc !important;
        border: 2px solid #404040 !important;
        border-radius: 8px !important;
        padding: 0.75rem 1.5rem !important;
        font-weight: 500 !important;
        font-size: 14px !important;
        transition: all 0.3s ease !important;
    }
    
    .stTabs [aria-selected="true"] {
        background-color: #10a37f !important;
        color: #ffffff !important;
        border-color: #10a37f !important;
        font-weight: 600 !important;
    }
    
    .stTabs [data-baseweb="tab"]:hover {
        background-color: #404040 !important;
        border-color: #555555 !important;
    }
    
    /* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–æ–º */
    [data-testid="metric-container"] {
        background-color: #2d2d2d !important;
        border: 2px solid #404040 !important;
        border-radius: 12px !important;
        padding: 1rem !important;
        margin: 0.5rem 0 !important;
        transition: all 0.3s ease !important;
    }
    
    [data-testid="metric-container"]:hover {
        border-color: #555555 !important;
        transform: translateY(-2px) !important;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3) !important;
    }
    
    [data-testid="metric-container"] [data-testid="metric-value"] {
        color: #ffffff !important;
        font-size: 1.2rem !important;
        font-weight: 600 !important;
    }
    
    [data-testid="metric-container"] [data-testid="metric-label"] {
        color: #cccccc !important;
        font-size: 0.9rem !important;
        font-weight: 500 !important;
    }
    
    [data-testid="metric-container"] [data-testid="metric-delta"] {
        font-size: 0.8rem !important;
        font-weight: 500 !important;
    }
    
    /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã */
    .stAlert, .stAlert > div {
        background-color: #2d2d2d !important;
        border: 2px solid #555555 !important;
        border-radius: 12px !important;
        color: #ffffff !important;
        padding: 1rem !important;
    }
    
    .stAlert[data-baseweb="notification"] [data-testid="alertContent"] {
        color: #ffffff !important;
    }
    
    /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ —ç–∫—Å–ø–∞–Ω–¥–µ—Ä—ã */
    .streamlit-expanderHeader, .stExpanderHeader {
        background-color: #2d2d2d !important;
        border: 2px solid #404040 !important;
        border-radius: 8px !important;
        color: #ffffff !important;
        padding: 0.75rem 1rem !important;
        font-weight: 500 !important;
    }
    
    .streamlit-expanderContent, .stExpanderContent {
        background-color: #1e1e1e !important;
        border: 2px solid #404040 !important;
        border-top: none !important;
        border-radius: 0 0 8px 8px !important;
        color: #ffffff !important;
        padding: 1rem !important;
    }
    
    /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–±–æ–∫—Å—ã */
    .stSelectbox > div > div, .stSelectbox select {
        background-color: #2d2d2d !important;
        border: 2px solid #555555 !important;
        color: #ffffff !important;
        border-radius: 8px !important;
        padding: 0.5rem !important;
    }
    
    .stSelectbox option {
        background-color: #2d2d2d !important;
        color: #ffffff !important;
    }
    
    /* –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ñ–∞–π–ª–æ–≤—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ */
    .stFileUploader > div, .stFileUploader label {
        background-color: #2d2d2d !important;
        border: 3px dashed #555555 !important;
        border-radius: 12px !important;
        color: #ffffff !important;
        padding: 2rem !important;
        text-align: center !important;
        transition: all 0.3s ease !important;
    }
    
    .stFileUploader > div:hover {
        border-color: #10a37f !important;
        background-color: #333333 !important;
    }
    
    /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã */
    .stForm, form {
        background-color: #2d2d2d !important;
        border: 2px solid #404040 !important;
        border-radius: 12px !important;
        padding: 1.5rem !important;
        margin: 1rem 0 !important;
    }
    
    /* –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —Å–ø–∏–Ω–Ω–µ—Ä–æ–≤ */
    input[type=number]::-webkit-outer-spin-button,
    input[type=number]::-webkit-inner-spin-button {
        -webkit-appearance: none !important;
        margin: 0 !important;
    }
    
    /* –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */
    .main .block-container {
        max-width: 900px !important;
        margin: 0 auto !important;
        padding: 1rem !important;
    }
    
    /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è */
    .welcome-message {
        text-align: center !important;
        color: #cccccc !important;
        font-size: 1.2rem !important;
        margin: 4rem 0 !important;
        padding: 2rem !important;
        background-color: #2d2d2d !important;
        border-radius: 12px !important;
        border: 2px solid #404040 !important;
    }
    
    .welcome-message h3 {
        color: #ffffff !important;
        font-size: 1.8rem !important;
        margin-bottom: 1rem !important;
        font-weight: 600 !important;
    }
    
    /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ */
    .main-title {
        text-align: center !important;
        margin-bottom: 3rem !important;
        padding: 1rem !important;
    }
    
    .main-title h1 {
        color: #ffffff !important;
        font-size: 2.5rem !important;
        font-weight: 700 !important;
        margin-bottom: 0.5rem !important;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5) !important;
    }
    
    .main-title p {
        color: #cccccc !important;
        font-size: 1.1rem !important;
        margin: 0 !important;
        font-weight: 400 !important;
    }
    
    /* –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã */
    .main > div {
        padding-top: 1rem !important;
    }
    
    /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ download –∫–Ω–æ–ø–∫–∏ */
    .stDownloadButton > button {
        background-color: #2d2d2d !important;
        color: #ffffff !important;
        border: 2px solid #555555 !important;
        border-radius: 8px !important;
        padding: 0.5rem 1rem !important;
        font-weight: 500 !important;
    }
    
    .stDownloadButton > button:hover {
        background-color: #404040 !important;
        border-color: #777777 !important;
        transform: translateY(-1px) !important;
    }
    
    /* –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */
    p, span, div, label, .stMarkdown {
        color: #ffffff !important;
    }
    
    /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ —á–µ–∫–±–æ–∫—Å—ã */
    .stCheckbox > label {
        color: #ffffff !important;
    }
    
    /* –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */
    .stProgress > div > div > div {
        background-color: #10a37f !important;
    }
    
    /* –°–∫—Ä—ã–≤–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø Streamlit */
    .css-1v0mbdj > img, [data-testid="stLogo"] {
        display: none !important;
    }
    
    /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –±–µ–ª–æ–≥–æ —Ñ–æ–Ω–∞ */
    body, html, .stApp, .main, .block-container, .element-container {
        background-color: #1a1a1a !important;
        color: #ffffff !important;
    }
    
    /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è sidebar (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è) */
    .css-1d391kg, .stSidebar {
        background-color: #1e1e1e !important;
        border-right: 2px solid #404040 !important;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è —Å–ø–∏–Ω–Ω–µ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏ */
    .stSpinner {
        color: #10a37f !important;
    }
    
    /* –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü */
    .stDataFrame, table {
        background-color: #2d2d2d !important;
        color: #ffffff !important;
        border: 1px solid #404040 !important;
    }
    
    .stDataFrame th, table th {
        background-color: #404040 !important;
        color: #ffffff !important;
        border: 1px solid #555555 !important;
    }
    
    .stDataFrame td, table td {
        background-color: #2d2d2d !important;
        color: #ffffff !important;
        border: 1px solid #404040 !important;
    }
</style>
""", unsafe_allow_html=True)

class DeveloperDataset:
    """–ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞—Å–µ—Ç–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞."""
    
    def __init__(self, dataset_file: str = "developer_dataset.json"):
        self.dataset_file = pathlib.Path(dataset_file)
        self.dataset = self.load_dataset()
    
    def load_dataset(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞."""
        if self.dataset_file.exists():
            try:
                with open(self.dataset_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return []
        return []
    
    def save_dataset(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞."""
        with open(self.dataset_file, 'w', encoding='utf-8') as f:
            json.dump(self.dataset, f, ensure_ascii=False, indent=2)
    
    def add_qa_pair(self, question: str, answer: str) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—ã –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç."""
        if not question.strip() or not answer.strip():
            return False
        
        qa_pair = {
            "id": hashlib.md5(question.encode('utf-8')).hexdigest()[:12],
            "question": question.strip(),
            "answer": answer.strip(),
            "created_at": datetime.now().isoformat(),
            "source": "developer_manual"
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        existing_ids = {item.get("id") for item in self.dataset}
        if qa_pair["id"] not in existing_ids:
            self.dataset.append(qa_pair)
            self.save_dataset()
            return True
        return False
    
    def get_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞."""
        return {
            "total_pairs": len(self.dataset),
            "last_updated": max([item.get("created_at", "") for item in self.dataset]) if self.dataset else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        }

def check_authentication():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞."""
    if 'dev_authenticated' not in st.session_state:
        st.session_state.dev_authenticated = False
    
    if not st.session_state.dev_authenticated:
        st.markdown("""
        <div class='auth-container'>
            <h2>üîê –ü–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</h2>
            <p>–í–≤–µ–¥–∏—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º</p>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            with st.form("dev_login"):
                login = st.text_input("üë§ –õ–æ–≥–∏–Ω:", placeholder="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω")
                password = st.text_input("üîí –ü–∞—Ä–æ–ª—å:", type="password", placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
                
                submitted = st.form_submit_button("üöÄ –í–æ–π—Ç–∏", use_container_width=True)
                
                if submitted:
                    if login in DEV_CREDENTIALS and DEV_CREDENTIALS[login] == password:
                        st.session_state.dev_authenticated = True
                        st.success("‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
                        st.balloons()
                        st.rerun()
                    else:
                        st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        st.info("üí° –ü–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        return False
    
    return True

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ä–∞–∑—É
init_session_state()

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–ø—Ä–æ—Å—Ç–æ–π, –±–µ–∑ –±–ª–æ–∫–∞)
st.markdown("""
<div class="main-title">
    <h1>ü§ñ –ò–ò –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</h1>
    <p>–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞</p>
</div>
""", unsafe_allow_html=True)

# –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ - —Ç–æ–ª—å–∫–æ 2!
tab1, tab2 = st.tabs(["üí¨ –ß–∞—Ç —Å –ò–ò", "üë®‚Äçüíª –ü–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"])

with tab1:
    # –ß–∞—Ç —Å –ò–ò - –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–±–µ–∑ –±–µ–ª–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
    
    # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å (–≤ —É–≥–ª—É)
    with st.expander("‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", expanded=False):
        col1, col2, col3, col4 = st.columns(4, gap="small")
        with col1:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            try:
                collections = qdrant.get_collections().collections
                if COLLECTION in {c.name for c in collections}:
                    collection_info = qdrant.get_collection(collection_name=COLLECTION)
                    docs_count = collection_info.points_count
                    status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞"
                else:
                    docs_count = 0
                    status = "üî¥ –ü—É—Å—Ç–∞"
            except:
                docs_count = 0
                status = "‚ö†Ô∏è –û—à–∏–±–∫–∞"
            
            st.metric("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", status, f"{docs_count} –¥–æ–∫.")
        
        with col2:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç–∞—Å–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
            try:
                if pathlib.Path("developer_dataset.json").exists():
                    with open("developer_dataset.json", 'r', encoding='utf-8') as f:
                        dataset = json.load(f)
                        qa_count = len(dataset)
                        dataset_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
                else:
                    qa_count = 0
                    dataset_status = "‚ö™ –ü—É—Å—Ç"
            except:
                qa_count = 0
                dataset_status = "‚ö†Ô∏è –û—à–∏–±–∫–∞"
            
            st.metric("–î–∞—Ç–∞—Å–µ—Ç Q&A", dataset_status, f"{qa_count} –ø–∞—Ä")
        
        with col3:
            # –ò–ò –ú–æ–¥–µ–ª—å
            ai_status = "üü¢ –ì–æ—Ç–æ–≤–∞" if st.session_state.ai_initialized else "üî¥ –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
            st.metric("–ò–ò –ú–æ–¥–µ–ª—å", ai_status, "DeepSeek 7B")
        
        with col4:
            # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            overall_status = "üü¢ –ì–æ—Ç–æ–≤–∞" if (docs_count > 0 or qa_count > 0) else "‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞"
            st.metric("–°–∏—Å—Ç–µ–º–∞", overall_status, "–û–Ω–ª–∞–π–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã
    docs_available = False
    qa_available = False
    
    try:
        collections = qdrant.get_collections().collections
        if COLLECTION in {c.name for c in collections}:
            collection_info = qdrant.get_collection(collection_name=COLLECTION)
            docs_available = collection_info.points_count > 0
    except:
        pass
    
    try:
        if pathlib.Path("developer_dataset.json").exists():
            with open("developer_dataset.json", 'r', encoding='utf-8') as f:
                dataset = json.load(f)
                qa_available = len(dataset) > 0
    except:
        pass
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    if not docs_available and not qa_available:
        st.warning("""
        **üìù –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞ –Ω–µ –æ–±—É—á–µ–Ω–∞!**
        
        –ß—Ç–æ–±—ã –ò–ò –º–æ–≥ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º—É.
        –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.
        """)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    if "messages" not in st.session_state:
        st.session_state.messages = []
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        if docs_available or qa_available:
            st.session_state.messages.append({
                "role": "assistant", 
                "content": "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"
            })
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    if st.session_state.messages:
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        if docs_available or qa_available:
            st.markdown("""
            <div class="welcome-message">
                <h3>–ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?</h3>
                <p>–ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã - —è –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å!</p>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown("""
            <div class="welcome-message">
                <h3>–°–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è...</h3>
                <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</p>
            </div>
            """, unsafe_allow_html=True)
    
    # –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if prompt := st.chat_input("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."):
        # –õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç –ò–ò –º–æ–¥—É–ª–µ–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        if not st.session_state.ai_initialized:
            with st.spinner("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –ò–ò —Å–∏—Å—Ç–µ–º—É..."):
                if lazy_import_rag():
                    st.session_state.ai_initialized = True
                else:
                    st.stop()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        st.session_state.messages.append({"role": "user", "content": prompt})
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with st.chat_message("user"):
            st.markdown(prompt)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        with st.chat_message("assistant"):
            message_placeholder = st.empty()
            with st.spinner("ü§î –û–±–¥—É–º—ã–≤–∞—é –æ—Ç–≤–µ—Ç..."):
                try:
                    response = st.session_state.generate(prompt)
                except Exception as e:
                    response = f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}"
            message_placeholder.markdown(response)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        st.session_state.messages.append({"role": "assistant", "content": response})
    
    # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ (–∫–æ–º–ø–∞–∫—Ç–Ω–∞—è)
    if len(st.session_state.messages) > 1:
        col1, col2, col3 = st.columns([1, 1, 1])
        with col2:
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", help="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è"):
                st.session_state.messages = []
                st.rerun()

with tab2:
    # –ü–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    if not check_authentication():
        st.stop()
    
    # –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    col1, col2 = st.columns([5, 1])
    with col1:
        st.markdown("""
        <div class='welcome-container'>
            <h3>üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞!</h3>
            <p>–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –ò–ò</p>
        </div>
        """, unsafe_allow_html=True)
    with col2:
        if st.button("üö™ –í—ã–π—Ç–∏", use_container_width=True):
            st.session_state.dev_authenticated = False
            st.rerun()
    
    # –í–∫–ª–∞–¥–∫–∏ –ø–∞–Ω–µ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    dev_tab1, dev_tab2, dev_tab3, dev_tab4 = st.tabs([
        "üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞", 
        "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏", 
        "ü§ñ –î–∞—Ç–∞—Å–µ—Ç Q&A",
        "üîß –û—Ç–ª–∞–¥–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
    ])
    
    with dev_tab1:
        st.markdown("### üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        st.info("""
        **üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:** –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –ª—é–±—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        
        **üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
        - üìÑ PDF (–≤–∫–ª—é—á–∞—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å OCR)
        - üìù DOCX (Microsoft Word)
        - üì∞ TXT, MD (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã)
        - üñºÔ∏è PNG, JPG, JPEG, WEBP (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º)
        """)
        
        uploaded_file = st.file_uploader(
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:",
            type=[ext.strip(".") for ext in SUPPORT],
            key="dev_file_upload",
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è PDF, DOCX, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã"
        )
        
        if uploaded_file:
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üìÅ –§–∞–π–ª", uploaded_file.name)
            with col2:
                st.metric("üìè –†–∞–∑–º–µ—Ä", f"{uploaded_file.size / 1024:.1f} KB")
            with col3:
                file_ext = pathlib.Path(uploaded_file.name).suffix.lower()
                st.metric("üè∑Ô∏è –¢–∏–ø", file_ext)
            
            if st.button("üöÄ –ò–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç", type="primary", use_container_width=True):
                with st.spinner("‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç..."):
                    try:
                        reader_func = READERS.get(file_ext)
                        if not reader_func:
                            st.error(f"‚ùå –§–æ—Ä–º–∞—Ç {file_ext} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                            st.stop()
                        
                        with tempfile.NamedTemporaryFile(suffix=file_ext, delete=False) as tmp:
                            tmp_path = pathlib.Path(tmp.name)
                            tmp_path.write_bytes(uploaded_file.getvalue())
                        
                        extracted_text = reader_func(tmp_path)
                        tmp_path.unlink(missing_ok=True)
                        
                        if extracted_text and not extracted_text.startswith("–û—à–∏–±–∫–∞"):
                            char_count = len(extracted_text)
                            word_count = len(extracted_text.split())
                            line_count = len(extracted_text.splitlines())
                            
                            st.success("‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω!")
                            
                            col1, col2, col3 = st.columns(3)
                            with col1:
                                st.metric("üìù –°–∏–º–≤–æ–ª–æ–≤", f"{char_count:,}")
                            with col2:
                                st.metric("üî§ –°–ª–æ–≤", f"{word_count:,}")
                            with col3:
                                st.metric("üìÑ –°—Ç—Ä–æ–∫", f"{line_count:,}")
                            
                            with st.expander("üëÄ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä (–ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤)"):
                                preview_text = extracted_text[:1000] + "..." if len(extracted_text) > 1000 else extracted_text
                                st.text_area("", preview_text, height=200, disabled=True)
                            
                            filename = f"extracted_text_{uploaded_file.name.split('.')[0]}.txt"
                            st.download_button(
                                label="üíæ –°–∫–∞—á–∞—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç",
                                data=extracted_text,
                                file_name=filename,
                                mime="text/plain",
                                use_container_width=True
                            )
                        else:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {extracted_text}")
                    except Exception as e:
                        st.error(f"üí• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    with dev_tab2:
        st.markdown("### üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        try:
            collections = qdrant.get_collections().collections
            if COLLECTION in {c.name for c in collections}:
                collection_info = qdrant.get_collection(collection_name=COLLECTION)
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("üìä –°—Ç–∞—Ç—É—Å –±–∞–∑—ã", "üü¢ –ê–∫—Ç–∏–≤–Ω–∞")
                with col2:
                    st.metric("üìÑ –§—Ä–∞–≥–º–µ–Ω—Ç–æ–≤", f"{collection_info.points_count:,}")
                with col3:
                    st.metric("üß† –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å", f"{collection_info.config.params.vectors.size}D")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –≤ –±–∞–∑–µ
                try:
                    sample_points = qdrant.scroll(
                        collection_name=COLLECTION,
                        limit=1000,
                        with_payload=True
                    )
                    
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
                    files_in_db = {}
                    for point in sample_points[0]:
                        filename = point.payload.get("file", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                        if filename in files_in_db:
                            files_in_db[filename] += 1
                        else:
                            files_in_db[filename] = 1
                    
                    if files_in_db:
                        st.success(f"‚úÖ –ë–∞–∑–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(files_in_db)} —Ñ–∞–π–ª–æ–≤")
                        
                        with st.expander("üìã –§–∞–π–ª—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", expanded=False):
                            for filename, chunks in files_in_db.items():
                                col1, col2, col3 = st.columns([3, 1, 1])
                                with col1:
                                    st.write(f"üìÑ {filename}")
                                with col2:
                                    st.write(f"{chunks} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤")
                                with col3:
                                    file_key = f"file_{filename.replace('.', '_').replace(' ', '_').replace('/', '_')}"
                                    
                                    if filename not in st.session_state.files_to_delete:
                                        if st.button(f"üóëÔ∏è", key=f"delete_{file_key}", help=f"–£–¥–∞–ª–∏—Ç—å {filename}"):
                                            st.session_state.files_to_delete.add(filename)
                                            st.rerun()
                                    else:
                                        st.write("‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å?")
                                        col_yes, col_no = st.columns(2)
                                        
                                        with col_yes:
                                            if st.button("‚úÖ", key=f"confirm_{file_key}", help="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"):
                                                try:
                                                    all_points = qdrant.scroll(
                                                        collection_name=COLLECTION,
                                                        with_payload=True,
                                                        limit=10000
                                                    )
                                                    
                                                    points_to_delete = []
                                                    for point in all_points[0]:
                                                        if point.payload.get("file") == filename:
                                                            points_to_delete.append(point.id)
                                                    
                                                    if points_to_delete:
                                                        qdrant.delete(
                                                            collection_name=COLLECTION,
                                                            points_selector=points_to_delete
                                                        )
                                                        st.success(f"‚úÖ –§–∞–π–ª {filename} —É–¥–∞–ª–µ–Ω ({len(points_to_delete)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤)")
                                                        st.session_state.files_to_delete.discard(filename)
                                                        st.rerun()
                                                    else:
                                                        st.warning(f"‚ö†Ô∏è –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                                                        st.session_state.files_to_delete.discard(filename)
                                                except Exception as e:
                                                    st.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")
                                                    st.session_state.files_to_delete.discard(filename)
                                        
                                        with col_no:
                                            if st.button("‚ùå", key=f"cancel_{file_key}", help="–û—Ç–º–µ–Ω–∞"):
                                                st.session_state.files_to_delete.discard(filename)
                                                st.rerun()
                    else:
                        st.info("‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤")
                        
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö: {str(e)}")
            else:
                st.warning("‚ö†Ô∏è –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞")
                st.metric("üìä –°—Ç–∞—Ç—É—Å –±–∞–∑—ã", "üî¥ –ü—É—Å—Ç–∞")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ: {str(e)}")
        
        st.divider()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        st.markdown("#### ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
        st.info("üí° –ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")
        
        uploaded = st.file_uploader(
            "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π:",
            accept_multiple_files=True,
            type=[ext.strip(".") for ext in SUPPORT],
            key="add_files"
        )
        
        if uploaded:
            st.write(f"üìã –í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: **{len(uploaded)}**")
            
            for file in uploaded:
                st.write(f"‚Ä¢ {file.name} ({file.size / 1024:.1f} KB)")
            
            col1, col2 = st.columns([3, 1])
            with col2:
                if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É", type="primary", use_container_width=True):
                    with st.spinner("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã..."):
                        collections = qdrant.get_collections().collections
                        if COLLECTION not in {c.name for c in collections}:
                            st.info("üÜï –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π...")
                            qdrant.create_collection(
                                COLLECTION,
                                vectors_config=VectorParams(size=1024, distance=Distance.COSINE),
                            )
                        
                        tmpdir = pathlib.Path(tempfile.mkdtemp())
                        paths = []
                        
                        for f in uploaded:
                            path = tmpdir / f.name
                            path.write_bytes(f.read())
                            paths.append(path)
                        
                        st.info(f"üìö –î–æ–±–∞–≤–ª—è—é {len(paths)} —Ñ–∞–π–ª–æ–≤...")
                        
                        try:
                            add_documents_to_existing_collection(paths)
                            collection_info = qdrant.get_collection(collection_name=COLLECTION)
                            st.success(f"üéâ –§–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã! –í—Å–µ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {collection_info.points_count}")
                            st.balloons()
                            st.rerun()
                        except Exception as e:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {str(e)}")
        
        st.divider()
        st.markdown("#### üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫", use_container_width=True, key="test_search_btn"):
                st.session_state['show_test_search'] = True
            
            if st.session_state.get('show_test_search', False):
                test_query = st.text_input("–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:", placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", key="test_search_query")
                if test_query:
                    if not st.session_state.ai_initialized:
                        if lazy_import_rag():
                            st.session_state.ai_initialized = True
                    
                    with st.spinner("üîç –ò—â—É..."):
                        try:
                            context = st.session_state.search_ctx(test_query, k=3)
                            st.text_area("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:", context, height=200, key="test_search_result")
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")
        
        with col2:
            if not st.session_state.confirm_delete_all:
                if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∞–∑—É", use_container_width=True, type="secondary"):
                    st.session_state.confirm_delete_all = True
                    st.rerun()
            else:
                st.warning("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–Æ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö?")
                col_confirm, col_cancel = st.columns(2)
                
                with col_confirm:
                    if st.button("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", type="primary", use_container_width=True, key="confirm_delete_all_btn"):
                        try:
                            collections = qdrant.get_collections().collections
                            if COLLECTION in {c.name for c in collections}:
                                qdrant.delete_collection(collection_name=COLLECTION)
                                st.success("‚úÖ –ë–∞–∑–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞")
                                reset_delete_states()
                                st.rerun()
                            else:
                                st.info("‚ÑπÔ∏è –ë–∞–∑–∞ —É–∂–µ –ø—É—Å—Ç–∞")
                                reset_delete_states()
                        except Exception as e:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                            reset_delete_states()
                
                with col_cancel:
                    if st.button("‚ùå –û—Ç–º–µ–Ω–∞", use_container_width=True, key="cancel_delete_all_btn"):
                        reset_delete_states()
                        st.rerun()
        
        with col3:
            if st.button("üìä –ü–æ–∏—Å–∫ –ø–æ —Ñ–∞–π–ª—É", use_container_width=True, key="file_search_btn"):
                st.session_state['show_file_search'] = True
            
            if st.session_state.get('show_file_search', False):
                try:
                    sample_points = qdrant.scroll(collection_name=COLLECTION, limit=100, with_payload=True)
                    files_list = list(set(point.payload.get("file", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") for point in sample_points[0]))
                    
                    if files_list:
                        selected_file = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª:", files_list, key="file_search_select")
                        search_query = st.text_input("–ü–æ–∏—Å–∫ –≤ —Ñ–∞–π–ª–µ:", placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ñ–∞–π–ª–µ", key="file_search_query")
                        
                        if search_query and selected_file and st.button("üîç –ò—Å–∫–∞—Ç—å –≤ —Ñ–∞–π–ª–µ", key="search_in_file_btn"):
                            if not st.session_state.ai_initialized:
                                if lazy_import_rag():
                                    st.session_state.ai_initialized = True
                            
                            with st.spinner("üîç –ò—â—É –≤ —Ñ–∞–π–ª–µ..."):
                                try:
                                    context = st.session_state.search_in_specific_file(search_query, selected_file)
                                    st.text_area(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –≤ {selected_file}:", context, height=200, key="file_search_result")
                                except Exception as e:
                                    st.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ —Ñ–∞–π–ª–µ: {str(e)}")
                    else:
                        st.info("üìÅ –§–∞–π–ª—ã –≤ –±–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {str(e)}")
    
    with dev_tab3:
        st.markdown("### ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–æ–º Q&A")
        
        if 'dev_dataset' not in st.session_state:
            st.session_state.dev_dataset = DeveloperDataset()
        
        dataset = st.session_state.dev_dataset
        stats = dataset.get_stats()
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("üí¨ –í—Å–µ–≥–æ –ø–∞—Ä Q&A", stats["total_pairs"])
        with col2:
            st.metric("üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", 
                     stats["last_updated"][:10] if stats["last_updated"] != "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö" else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        with col3:
            avg_length = sum(len(item["answer"]) for item in dataset.dataset) // max(1, len(dataset.dataset))
            st.metric("üìè –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞", f"{avg_length} —Å–∏–º–≤–æ–ª–æ–≤")
        
        st.divider()
        
        st.markdown("#### ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç")
        
        with st.form("add_qa_pair", clear_on_submit=True):
            col1, col2 = st.columns([1, 1])
            
            with col1:
                question = st.text_area(
                    "‚ùì –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                    height=120,
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Python –Ω–∞ Windows?",
                    help="–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∑–∞–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                )
            
            with col2:
                answer = st.text_area(
                    "üí° –û—Ç–≤–µ—Ç –ò–ò:",
                    height=120,
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Python –Ω–∞ Windows –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ python.org...",
                    help="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –¥–∞—Ç—å –ò–ò"
                )
            
            submitted = st.form_submit_button("üíæ –î–æ–±–∞–≤–∏—Ç—å –≤ –¥–∞—Ç–∞—Å–µ—Ç", type="primary", use_container_width=True)
            
            if submitted:
                if question.strip() and answer.strip():
                    if dataset.add_qa_pair(question, answer):
                        st.success("‚úÖ –ü–∞—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –¥–∞—Ç–∞—Å–µ—Ç!")
                        st.balloons()
                        st.rerun()
                    else:
                        st.warning("‚ö†Ô∏è –¢–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±–∞ –ø–æ–ª—è")
        
        if dataset.dataset:
            st.divider()
            st.markdown("#### üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–∏")
            
            search_query = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º:", placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞...")
            
            filtered_dataset = dataset.dataset
            if search_query:
                filtered_dataset = [
                    item for item in dataset.dataset 
                    if search_query.lower() in item["question"].lower()
                ]
            
            st.write(f"üìä –ü–æ–∫–∞–∑–∞–Ω–æ: **{len(filtered_dataset)}** –∏–∑ **{len(dataset.dataset)}** –ø–∞—Ä")
            
            for i, item in enumerate(reversed(filtered_dataset[-10:])):
                with st.expander(f"‚ùì {item['question'][:80]}...", expanded=False):
                    col1, col2 = st.columns([4, 1])
                    
                    with col1:
                        st.markdown(f"**–í–æ–ø—Ä–æ—Å:** {item['question']}")
                        st.markdown(f"**–û—Ç–≤–µ—Ç:** {item['answer']}")
                        st.caption(f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {item.get('created_at', 'N/A')[:16]}")
                    
                    with col2:
                        if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_qa_{item['id']}", help="–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø–∞—Ä—É"):
                            dataset.dataset = [d for d in dataset.dataset if d["id"] != item["id"]]
                            dataset.save_dataset()
                            st.rerun()
            
            st.divider()
            st.markdown("#### üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞—Ç–∞—Å–µ—Ç–∞")
            
            col1, col2 = st.columns(2)
            
            with col1:
                json_data = json.dumps(dataset.dataset, ensure_ascii=False, indent=2)
                st.download_button(
                    label="üìÑ –°–∫–∞—á–∞—Ç—å JSON",
                    data=json_data,
                    file_name=f"qa_dataset_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                    mime="application/json",
                    use_container_width=True
                )
            
            with col2:
                txt_data = ""
                for item in dataset.dataset:
                    txt_data += f"–í–û–ü–†–û–°: {item['question']}\n"
                    txt_data += f"–û–¢–í–ï–¢: {item['answer']}\n"
                    txt_data += f"–î–ê–¢–ê: {item.get('created_at', 'N/A')}\n"
                    txt_data += "-" * 50 + "\n\n"
                
                st.download_button(
                    label="üìù –°–∫–∞—á–∞—Ç—å TXT",
                    data=txt_data,
                    file_name=f"qa_dataset_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                    mime="text/plain",
                    use_container_width=True
                )
        else:
            st.info("üìù –î–∞—Ç–∞—Å–µ—Ç –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç!")
    
    with dev_tab4:
        st.markdown("### üîß –û—Ç–ª–∞–¥–∫–∞ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
            
            try:
                if st.session_state.ai_initialized:
                    st.success("‚úÖ –ò–ò –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω")
                else:
                    st.error("‚ùå –ò–ò –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            except:
                st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ò–ò –º–æ–¥—É–ª—è")
            
            try:
                collections = qdrant.get_collections()
                st.success("‚úÖ Qdrant –ø–æ–¥–∫–ª—é—á–µ–Ω")
                st.info(f"üóÑÔ∏è –ö–æ–ª–ª–µ–∫—Ü–∏–π: {len(collections.collections)}")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ Qdrant: {str(e)}")
            
            try:
                from ingest import embedder
                test_embedding = list(embedder.embed(["—Ç–µ—Å—Ç"]))[0]
                st.success("‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥ –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
                st.info(f"üî¢ –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {len(test_embedding)}")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {str(e)}")
        
        with col2:
            st.markdown("#### üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")
            
            test_query = st.text_input("üîç –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:", placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", key="debug_test_query")
            
            if test_query and st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç", use_container_width=True, key="debug_test_btn"):
                if not st.session_state.ai_initialized:
                    if lazy_import_rag():
                        st.session_state.ai_initialized = True
                
                with st.spinner("üî¨ –¢–µ—Å—Ç–∏—Ä—É—é —Å–∏—Å—Ç–µ–º—É..."):
                    
                    st.markdown("**üìö –¢–µ—Å—Ç RAG —Å–∏—Å—Ç–µ–º—ã:**")
                    try:
                        context = st.session_state.search_ctx(test_query, k=3)
                        if context.startswith(("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ", "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")):
                            st.warning("‚ö†Ô∏è RAG –Ω–µ –Ω–∞—à–µ–ª —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                        else:
                            st.success("‚úÖ RAG –Ω–∞—à–µ–ª —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
                            st.text_area("üìÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç:", context[:300] + "...", height=100, key="debug_context_result")
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ RAG: {str(e)}")
                    
                    st.markdown("**üéØ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:**")
                    try:
                        full_response = st.session_state.generate(test_query)
                        st.success("‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                        st.text_area("ü§ñ –û—Ç–≤–µ—Ç –ò–ò:", full_response, height=150, key="debug_full_result")
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        
        st.divider()
        st.markdown("#### üìã –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏")
        
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", key="debug_system_info"):
            try:
                import torch
                import psutil
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM", f"{psutil.virtual_memory().percent:.1f}%")
                    st.metric("üî• CUDA –¥–æ—Å—Ç—É–ø–Ω–∞", "‚úÖ" if torch.cuda.is_available() else "‚ùå")
                
                with col2:
                    if torch.cuda.is_available():
                        gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1024**3
                        st.metric("üéÆ GPU –ø–∞–º—è—Ç—å", f"{gpu_memory:.1f} GB")
                        st.metric("üöÄ GPU –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ", f"{torch.cuda.memory_allocated(0) / 1024**3:.1f} GB")
                    else:
                        st.metric("üéÆ GPU", "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                        st.metric("üíª CPU —Ä–µ–∂–∏–º", "‚úÖ")
                
                with col3:
                    import sys
                    st.metric("üêç Python", f"{sys.version.split()[0]}")
                    st.metric("‚è∞ –°—Ç–∞—Ç—É—Å –ò–ò", "‚úÖ –ì–æ—Ç–æ–≤–æ" if st.session_state.ai_initialized else "‚ùå –û—à–∏–±–∫–∞")
            except ImportError:
                st.error("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

st.markdown("""
<script>
// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
document.addEventListener('DOMContentLoaded', function() {
    document.body.style.backgroundColor = '#1a1a1a';
    document.body.style.color = '#ffffff';
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 500–º—Å
    setTimeout(function() {
        document.body.style.backgroundColor = '#1a1a1a';
        document.body.style.color = '#ffffff';
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º –∫ main —ç–ª–µ–º–µ–Ω—Ç—É
        const mainElements = document.querySelectorAll('.main, .stApp, .block-container');
        mainElements.forEach(el => {
            el.style.backgroundColor = '#1a1a1a';
            el.style.color = '#ffffff';
        });
    }, 500);
});
</script>
""", unsafe_allow_html=True)